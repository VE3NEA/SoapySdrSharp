//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pothosware.SoapySDR {

internal class TypeConversionInternal : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TypeConversionInternal(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TypeConversionInternal obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(TypeConversionInternal obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~TypeConversionInternal() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SoapySDRPINVOKE.delete_TypeConversionInternal(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static Kwargs StringToKwargs(string args) {
    Kwargs ret = new Kwargs(SoapySDRPINVOKE.TypeConversionInternal_StringToKwargs(args), true);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string KwargsToString(Kwargs kwargs) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_KwargsToString(Kwargs.getCPtr(kwargs));
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string SByteToString(sbyte setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_SByteToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ShortToString(short setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_ShortToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string IntToString(int setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_IntToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string LongToString(long setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_LongToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ByteToString(byte setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_ByteToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string UShortToString(ushort setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_UShortToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string UIntToString(uint setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_UIntToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string ULongToString(ulong setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_ULongToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string BoolToString(bool setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_BoolToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string FloatToString(float setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_FloatToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string DoubleToString(double setting) {
    string ret = SoapySDRPINVOKE.TypeConversionInternal_DoubleToString(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static sbyte StringToSByte(string setting) {
    sbyte ret = SoapySDRPINVOKE.TypeConversionInternal_StringToSByte(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static short StringToShort(string setting) {
    short ret = SoapySDRPINVOKE.TypeConversionInternal_StringToShort(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int StringToInt(string setting) {
    int ret = SoapySDRPINVOKE.TypeConversionInternal_StringToInt(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static long StringToLong(string setting) {
    long ret = SoapySDRPINVOKE.TypeConversionInternal_StringToLong(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static byte StringToByte(string setting) {
    byte ret = SoapySDRPINVOKE.TypeConversionInternal_StringToByte(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ushort StringToUShort(string setting) {
    ushort ret = SoapySDRPINVOKE.TypeConversionInternal_StringToUShort(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static uint StringToUInt(string setting) {
    uint ret = SoapySDRPINVOKE.TypeConversionInternal_StringToUInt(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ulong StringToULong(string setting) {
    ulong ret = SoapySDRPINVOKE.TypeConversionInternal_StringToULong(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool StringToBool(string setting) {
    bool ret = SoapySDRPINVOKE.TypeConversionInternal_StringToBool(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float StringToFloat(string setting) {
    float ret = SoapySDRPINVOKE.TypeConversionInternal_StringToFloat(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double StringToDouble(string setting) {
    double ret = SoapySDRPINVOKE.TypeConversionInternal_StringToDouble(setting);
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
