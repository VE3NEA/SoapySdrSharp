//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pothosware.SoapySDR {


/// <summary>Metadata returned from a streaming operation.</summary>
public class StreamResult : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StreamResult(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StreamResult obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(StreamResult obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~StreamResult() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SoapySDRPINVOKE.delete_StreamResult(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  /// <summary>How many samples were written or read by the streaming operation.</summary>
  public uint NumSamples {
    set {
      SoapySDRPINVOKE.StreamResult_NumSamples_set(swigCPtr, value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = SoapySDRPINVOKE.StreamResult_NumSamples_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>Bitwise metadata flags returned from the driver.</summary>
  public StreamFlags Flags {
    set {
      SoapySDRPINVOKE.StreamResult_Flags_set(swigCPtr, (int)value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      StreamFlags ret = (StreamFlags)SoapySDRPINVOKE.StreamResult_Flags_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>If positive, a timestamp for the associated buffer.</summary>
  public long TimeNs {
    set {
      SoapySDRPINVOKE.StreamResult_TimeNs_set(swigCPtr, value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      long ret = SoapySDRPINVOKE.StreamResult_TimeNs_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>A bitwise mask of which channels the operation applies to.</summary>
  public uint ChanMask {
    set {
      SoapySDRPINVOKE.StreamResult_ChanMask_set(swigCPtr, value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      uint ret = SoapySDRPINVOKE.StreamResult_ChanMask_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public StreamResult() : this(SoapySDRPINVOKE.new_StreamResult(), true) {
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
