//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pothosware.SoapySDR {


/// <summary>Representation of a key/value argument.</summary>
public class ArgInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ArgInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ArgInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(ArgInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~ArgInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SoapySDRPINVOKE.delete_ArgInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

    //
    // Object overrides
    //

    public override string ToString()
    {
        return string.Format("{0} ({1})", Name, ArgType);
    }

    public override bool Equals(object obj)
    {
        var objAsArgInfo = obj as ArgInfo;
        if(objAsArgInfo != null) return Key.Equals(objAsArgInfo.Key) && ArgType.Equals(objAsArgInfo.ArgType);
        else                     return false;
    }

    public override int GetHashCode() => HashCodeBuilder.Create()
        .AddValue(GetType())
        .AddValue(Key)
        .AddValue(ArgType);

  public ArgInfo() : this(SoapySDRPINVOKE.new_ArgInfo(), true) {
    if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>The key used to identify the argument.</summary>
  public string Key {
    set {
      SoapySDRPINVOKE.ArgInfo_Key_set(swigCPtr, value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SoapySDRPINVOKE.ArgInfo_Key_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>The default value of the argument when not specified.</summary>
  public string Value {
    set {
      SoapySDRPINVOKE.ArgInfo_Value_set(swigCPtr, value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SoapySDRPINVOKE.ArgInfo_Value_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>The displayable name of the argument.</summary>
  public string Name {
    set {
      SoapySDRPINVOKE.ArgInfo_Name_set(swigCPtr, value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SoapySDRPINVOKE.ArgInfo_Name_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>A brief description about the argument.</summary>
  public string Description {
    set {
      SoapySDRPINVOKE.ArgInfo_Description_set(swigCPtr, value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SoapySDRPINVOKE.ArgInfo_Description_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>The units of the argument: dB, Hz, etc.</summary>
  public string Units {
    set {
      SoapySDRPINVOKE.ArgInfo_Units_set(swigCPtr, value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SoapySDRPINVOKE.ArgInfo_Units_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  /// <summary>The data type of the argument.</summary>
  public ArgInfo.Type ArgType {
    set {
      SoapySDRPINVOKE.ArgInfo_ArgType_set(swigCPtr, (int)value);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ArgInfo.Type ret = (ArgInfo.Type)SoapySDRPINVOKE.ArgInfo_ArgType_get(swigCPtr);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  
/// <summary>
/// The range of possible numeric values.
///
/// When specified, the argument should be restricted to this range.
/// The range is only applicable to numeric argument types.
/// </summary>

  public Range Range {
    set {
      SoapySDRPINVOKE.ArgInfo_Range_set(swigCPtr, Range.getCPtr(value));
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = SoapySDRPINVOKE.ArgInfo_Range_get(swigCPtr);
      Range ret = (cPtr == global::System.IntPtr.Zero) ? null : new Range(cPtr, false);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  
/// <summary>
/// A discrete list of possible values.
///
/// When specified, the argument should be restricted to this options set.
/// </summary>

  public StringList Options {
    set {
      SoapySDRPINVOKE.ArgInfo_Options_set(swigCPtr, StringList.getCPtr(value));
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = SoapySDRPINVOKE.ArgInfo_Options_get(swigCPtr);
      StringList ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringList(cPtr, false);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  
/// <summary>
/// A discrete list of displayable names for the enumerated options.
///
/// When not specified, the option value itself can be used as a display name.
/// </summary>

  public StringList OptionNames {
    set {
      SoapySDRPINVOKE.ArgInfo_OptionNames_set(swigCPtr, StringList.getCPtr(value));
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = SoapySDRPINVOKE.ArgInfo_OptionNames_get(swigCPtr);
      StringList ret = (cPtr == global::System.IntPtr.Zero) ? null : new StringList(cPtr, false);
      if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  
  /// <summary>The data type of the argument.</summary>
  public enum Type {
    /// <summary>Boolean argument</summary>
    Bool,
    /// <summary>Integral argument</summary>
    Int,
    /// <summary>Floating-point argument</summary>
    Float,
    /// <summary>String argument</summary>
    String
  }

}

}
