//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.3.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Pothosware.SoapySDR {

public partial class BuildInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BuildInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BuildInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(BuildInfo obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~BuildInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SoapySDRPINVOKE.delete_BuildInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  
  /// <summary>
  /// Version strings for the SoapySDR version used to build the underlying SWIG module.
  /// </summary>
  public class SWIGModule : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SWIGModule(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGModule obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(SWIGModule obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~SWIGModule() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            SoapySDRPINVOKE.delete_BuildInfo_SWIGModule(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    
  /// <summary>
  /// The SoapySDR ABI version the underlying SWIG module was built against.
  ///
  /// On instantiation of a device, this version will be validated against
  /// the installed library.
  /// </summary>
    public static string ABIVersion {
      get {
        string ret = SoapySDRPINVOKE.BuildInfo_SWIGModule_ABIVersion_get();
        if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    
  /// <summary>
  /// The SoapySDR API version the underlying SWIG module was built against.
  ///
  /// The format of the version string is <b>major.minor.increment</b>.
  /// </summary>
    public static string APIVersion {
      get {
        string ret = SoapySDRPINVOKE.BuildInfo_SWIGModule_APIVersion_get();
        if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    
  /// <summary>
  /// The underlying SoapySDR library version the underlying SWIG module was built against.
  ///
  /// The format of the version string is <b>major.minor.patch-buildInfo</b>.
  /// </summary>
    public static string LibVersion {
      get {
        string ret = SoapySDRPINVOKE.BuildInfo_SWIGModule_LibVersion_get();
        if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
  }

  
  /// <summary>
  /// Version strings for the SoapySDR build currently installed.
  /// </summary>
  public class Runtime : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Runtime(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Runtime obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef swigRelease(Runtime obj) {
      if (obj != null) {
        if (!obj.swigCMemOwn)
          throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
        global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
        obj.swigCMemOwn = false;
        obj.Dispose();
        return ptr;
      } else {
        return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  
    ~Runtime() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            SoapySDRPINVOKE.delete_BuildInfo_Runtime(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    
  /// <summary>
  /// The ABI version of the currently installed SoapySDR library.
  ///
  /// On instantiation of a device, this version will be validated against
  /// the assembly.
  /// </summary>
    public static string ABIVersion {
      get {
        string ret = SoapySDRPINVOKE.BuildInfo_Runtime_ABIVersion_get();
        if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    
  /// <summary>
  /// The API version of the currently installed SoapySDR library.
  ///
  /// The format of the version string is <b>major.minor.increment</b>.
  /// </summary>
    public static string APIVersion {
      get {
        string ret = SoapySDRPINVOKE.BuildInfo_Runtime_APIVersion_get();
        if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    
  /// <summary>
  /// The library version of the currently installed SoapySDR library.
  ///
  /// The format of the version string is <b>major.minor.patch-buildInfo</b>.
  /// </summary>
    public static string LibVersion {
      get {
        string ret = SoapySDRPINVOKE.BuildInfo_Runtime_LibVersion_get();
        if (SoapySDRPINVOKE.SWIGPendingException.Pending) throw SoapySDRPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
  }

}

}
